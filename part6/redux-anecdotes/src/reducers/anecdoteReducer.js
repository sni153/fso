// Import necessary modules
import { createSlice } from '@reduxjs/toolkit';
import anecdoteService from '../services/anecdotes';

// Create a slice for handling anecdotes
const anecdoteSlice = createSlice({
  name: 'anecdotes', // Name of the slice
  initialState: [], // Initial state for the anecdotes
  reducers: {
    // Reducer function to handle voting for an anecdote
    voteAnecdote: (state, action) => {
      let targetAnecdoteId = action.payload;
      let anecdoteToVote = state.find(anecdote => anecdote.id === targetAnecdoteId)
      if (anecdoteToVote) {
        const updatedAnecdote = {
          ...anecdoteToVote,
          votes: anecdoteToVote.votes + 1
        };
        // Update the state by replacing the voted anecdote and sorting by votes
        return state
          .map(anecdote => (anecdote.id !== targetAnecdoteId ? anecdote : updatedAnecdote))
          .sort((a, b) => b.votes - a.votes); // Sort by votes in descending order
      }
    },
    // Reducer function to create a new anecdote
    createAnecdote: (state, action) => {
      state.push(action.payload) // Add the new anecdote to the state
    },
    // Reducer function to append an existing anecdote
    appendAnecdote: (state, action) => {
      state.push(action.payload) // Add the existing anecdote to the state
    },
    // Reducer function to set anecdotes
    setAnecdotes: (state, action) => {
      return action.payload // Set anecdotes in the state
    } 
  },
});

// Destructure and export the actions from the slice
export const { voteAnecdote, createAnecdote, appendAnecdote, setAnecdotes } = anecdoteSlice.actions;

// Async action creator to initialize anecdotes from the server
export const initializeAnecdotes = () => {
  return async dispatch => {
    const anecdotes = await anecdoteService.getAll(); // Fetch anecdotes from the service
    dispatch(setAnecdotes(anecdotes)); // Dispatch an action to set fetched anecdotes in the state
  }
}

// Export the reducer function generated by createSlice
export default anecdoteSlice.reducer;