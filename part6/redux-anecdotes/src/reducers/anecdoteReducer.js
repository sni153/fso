// Import necessary modules
import { createSlice } from '@reduxjs/toolkit'; // Import createSlice from Redux Toolkit
import anecdoteService from '../services/anecdotes'; // Import anecdoteService for API calls

// Create a slice for handling anecdotes
const anecdoteSlice = createSlice({
  name: 'anecdotes', // Name of the slice
  initialState: [], // Initial state for the anecdotes
  reducers: {
    // Reducer function to handle voting for an anecdote
    voteAnecdote: (state, action) => {
      let targetAnecdote = action.payload; // Get the anecdote from the action payload
      let anecdoteToVote = state.find(anecdote => anecdote.id === targetAnecdote.id) // Find the anecdote in the state
      if (anecdoteToVote) {
        anecdoteToVote.votes = targetAnecdote.votes; // Directly update the votes of the anecdote
      }
      // Sort the state array in place by votes in descending order
      state.sort((a, b) => b.votes - a.votes);
    },
    // Reducer function to append an existing anecdote
    appendAnecdote: (state, action) => {
      state.push(action.payload) // Add the existing anecdote to the state
    },
    // Reducer function to set anecdotes
    setAnecdotes: (state, action) => {
      return action.payload // Set anecdotes in the state
    } 
  },
});

// Destructure and export the actions from the slice
export const { voteAnecdote, appendAnecdote, setAnecdotes } = anecdoteSlice.actions;

// Async action creator to initialize anecdotes from the server
export const initializeAnecdotes = () => {
  return async dispatch => {
    const anecdotes = await anecdoteService.getAll(); // Fetch anecdotes from the service
    dispatch(setAnecdotes(anecdotes)); // Dispatch an action to set fetched anecdotes in the state
  }
}

// Async action creator function to create a new anecdote
export const createAnecdote = content => {
  return async dispatch => {
    const newAnecdote = await anecdoteService.createNew(content); // Create a new anecdote
    dispatch(appendAnecdote(newAnecdote)); // Dispatch an action to append the new anecdote to the state
  }
}

// Async action creator function to vote for an anecdote
export const voteForAnecdote = anecdote => {
  return async dispatch => {
    const updatedAnecdote = { ...anecdote, votes: anecdote.votes + 1 }; // Create a new anecdote object with the votes incremented
    const response = await anecdoteService.update(updatedAnecdote.id, updatedAnecdote); // Make a request to the server to update the anecdote
    dispatch(voteAnecdote(response)); // Dispatch an action to update the anecdote in the state
  }
}

// Export the reducer function generated by createSlice
export default anecdoteSlice.reducer; // Export the reducer for use in the store